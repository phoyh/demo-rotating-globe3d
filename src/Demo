	include	"/includes/hardware/offsets.i"
	include	"/includes/exec/exec_lib.i"
	include	"/includes/graphics/graphics_lib.i"
	include	"/includes/libraries/dos.i"
	include	"/includes/libraries/dos_lib.i"
size	equ	18945
sizeInit	equ	12646
	move.l	4.w,a6
	lea	grafname,a1
	jsr	OpenLibrary(a6)
	move.l	d0,_GfxBase
	lea	dosname,a1
	moveq	#0,d0
	jsr	OpenLibrary(a6)
	move.l	d0,_DosBase
	move.l	#8196,d0
	moveq	#3,d1
	jsr	AllocMem(a6)
	move.l	d0,CL
	move.l	d0,a4
	move.w	#bpl1pth,(a4)
	move.w	#bpl1ptl,4(a4)
	move.w	#bpl2pth,8(a4)
	move.w	#bpl2ptl,12(a4)
	move.w	#bpl3pth,16(a4)
	move.w	#bpl3ptl,20(a4)
	move.w	#bpl4pth,24(a4)
	move.w	#bpl4ptl,28(a4)
	move.w	#bpl5pth,32(a4)
	move.w	#bpl5ptl,36(a4)
	move.w	#bpl6pth,40(a4)
	move.w	#bpl6ptl,44(a4)
	lea	BitMap,a5
	moveq	#5,d7
AllocLoopBit	move.l	#10240,d0
	moveq	#3,d1
	jsr	AllocMem(a6)
	move.l	d0,(a5)+
	move.w	d0,6(a4)
	swap	d0
	move.w	d0,2(a4)
	adda.l	#8,a4
	dbf	d7,AllocLoopBit
	move.l	BitMap+16,d0
	add.l	#8680,d0
	move.l	d0,MetaBegin
	add.l	#27*40,d0
	move.l	d0,MetaShadBegin
	move.l	BitMap+16,WorldBegin
	bsr	WeltAlloc
	bsr	WeltLoad
	bsr	WeltInit
	bsr	Calculate
	bsr	MetaLoad
	bsr	MusicLoad
	bsr	IFFLoad
	move.l	4.w,a6
	jsr	Forbid(a6)
	movea.l	#0,a1
	jsr	FindTask(a6)
	move.l	d0,a1
	move.b	#121,d0
	jsr	SetTaskPri(a6)
	lea	$DFF000,a5
BlitterFinito	btst	#6,dmaconr(a5)
	bne	BlitterFinito
	move.w	#$1E0,dmacon(a5)
	bsr	IFFColor
	movea.l	CL,a4
	adda.l	#48,a4
	move.w	#bplcon1,(a4)+
	move.w	#8*17,(a4)+
	lea	MeerColor,a1
	move.w	#color06,d0
	move.w	#color22,d1
	moveq	#9,d7
	move.l	a4,Scroll1
	add.l	#2,Scroll1
CoListInit1	move.w	d0,(a4)+
	move.w	(a1)+,(a4)+
	add.w	#2,d0
	dbf	d7,CoListInit1
	lea	ColorList,a1
	move.l	#40*$1000000+$1FFFE,d0
	move.w	#179,d7
InitColorList	move.l	d0,(a4)+
	add.l	#$1000000,d0
	moveq	#9,d6
	move.w	#color22,d1
InitColorLoop	move.w	d1,(a4)+
	add.w	#2,d1
	move.w	(a1),(a4)+
	dbf	d6,InitColorLoop
	addq.l	#2,a1
	dbf	d7,InitColorList
	move.l	#255*$1000000+$7FFFFE,(a4)+
	lea	SchriftColor,a1
	move.w	#color22,d0
	move.w	#color06,d1
	moveq	#9,d7
	move.l	a4,Scroll2
	add.l	#2,Scroll2
CoListInit2	move.w	d0,(a4)+
	move.w	(a1)+,(a4)+
	move.w	d1,(a4)+
	clr.w	(a4)+
	add.w	#2,d0
	add.w	#2,d1
	dbf	d7,CoListInit2
	moveq	#11,d7
	move.l	#27*$1000000+$1FFFE,d0
	lea	Sinus+12,a0	
SinusScroll	move.l	d0,(a4)+
	move.w	#bplcon1,(a4)+
	clr.b	(a4)+
	move.b	-(a0),(a4)+
	add.l	#$1000000,d0
	dbf	d7,SinusScroll
	move.l	a4,d0
	subq.l	#1,d0
	move.l	d0,SinScrollBegin
	move.l	#$FFFFFFFE,(a4)
	move.w	#40*256+102,diwstrt(a5)
	move.w	#(296-256)*256+450-256,diwstop(a5)
	move.w	#$30,ddfstrt(a5)
	move.w	#$C8,ddfstop(a5)
	move.w	#0,bplcon2(a5)
	move.w	#$6000,bplcon0(a5)
	move.w	#0,bpl1mod(a5)
	move.w	#0,bpl2mod(a5)
	move.w	#%0000100111110000,bltcon0(a5)
	move.w	#%0000000000000000,bltcon1(a5)
	move.w	#$FFFF,bltafwm(a5)
	move.w	#$FFFF,bltalwm(a5)
	clr.w	bltdmod(a5)
	move.w	#$8040,dmacon(a5)
	move.l	MetaMorph,a6
	moveq	#1,d6
	clr.b	FrameMet
	move.b	#29,MetPhase
	moveq	#0,d4
	move.l	DestRelWorld,a2
	move.l	DestWorld,a3
	move.l	SourWorld,a4
	moveq	#14,d5
FirstLoop	bsr	DrawWelt
	dbf	d5,FirstLoop
	move.l	Calculated,a5
	bsr	CalcDrawWelt
	bsr	MetaDraw
	bsr	MetaShadow
	lea	$DFF000,a5
	move.l	CL,cop1lch(a5)
	move.w	#0,copjmp1(a5)
	move.w	#$83C0,dmacon(a5)
	move.l	Calculated,a5
Check	move.l	DestRelWorld,a2
	move.l	DestWorld,a3
	move.l	SourWorld,a4
	moveq	#15,d5
DivideUp	btst	#0,d5
	bne	NoCycleLoop
	bsr	MoveMent
	sub.w	#1,d6
	bne	NoMetaMorph
	cmpi.b	#181,FrameMet
	beq	EndIntro
	bsr	MetaDraw
	bra	NoShadowSinus
NoMetaMorph	bsr	ShadowSinus
NoShadowSinus	cmpi.b	#8,d5
	beq	CalcIt
NoCycleLoop	bsr	DrawWelt
	bra	NoCalc
CalcIt	bsr	CalcDrawWelt
NoCalc	bsr	MetaShadow
	dbf	d5,DivideUp
	add.w	#1,d4
	bra	Check
EndIntro	move.l	_GfxBase,a1
	lea	$DFF000,a5
	move.l	38(a1),cop1lch(a5)
	move.w	#0,copjmp1(a5)
	move.w	#$83E0,dmacon(a5)
	move.l	4.w,a6
	jsr	Permit(a6)
	move.l	CL,a1
	move.l	#8196,d0
	move.l	4.w,a6
	jsr	FreeMem(a6)
	lea	BitMap,a5
	moveq	#5,d7
FreeLoopBit	move.l	(a5)+,a1
	move.l	#10240,d0
	jsr	FreeMem(a6)
	dbf	d7,FreeLoopBit
	move.l	MetaMorph,a5
	move.w	#1,d6;#180,d6 REMOVED MORPH
FreeMeta	move.l	(a5)+,a1
	move.l	#960,d0
	jsr	FreeMem(a6)
	dbf	d6,FreeMeta
	move.l	MetaMorph,a1
	move.l	#724,d0
	jsr	FreeMem(a6)
	move.l	_GfxBase,a1
	jsr	CloseLibrary(a6)
	move.l	_DosBase,a1
	jsr	CloseLibrary(a6)
	bsr	WeltFree
	moveq	#0,d0
	rts
MetaDraw	lea	$DFF000,a0
	add.w	#$101,FrameMet
	moveq	#1,d6
	bset	#31,d4
	cmpi.b	#30,MetPhase
	bne	MetaDrawWait
	move.w	#664,d6
	clr.b	MetPhase
MetaDrawWait	btst	#6,dmaconr(a0)
	bne	MetaDrawWait
	clr.w	bltamod(a0)
	move.l	(a6),bltapth(a0)
	move.l	MetaBegin,bltdpth(a0)
	move.w	#24*64+20,bltsize(a0)
	rts
MetaShadow	btst	#31,d4
	beq	NoNewDraw
	lea	$DFF000,a0
	bclr	#31,d4
ShadowDrawWait	btst	#6,dmaconr(a0)
	bne	ShadowDrawWait
	move.w	#-120,bltamod(a0)
	move.l	(a6)+,d0
	add.l	#880,d0
	move.l	d0,bltapth(a0)
	move.l	MetaShadBegin,bltdpth(a0)
	move.w	#12*64+20,bltsize(a0)
NoNewDraw	rts
MoveMent	move.l	Scroll1,a0
	move.l	Scroll2,a1
	move.w	(a0),d0
	move.w	(a1),d1
	moveq	#8,d7
ColorCycle	move.w	4(a0),(a0)
	move.w	8(a1),(a1)
	adda.l	#4,a0
	adda.l	#8,a1
	dbf	d7,ColorCycle
	move.w	d0,(a0)
	move.w	d1,(a1)
	rts
ShadowSinus	move.l	SinScrollBegin,a0
	lea	Sinus,a1
	move.w	MomSinPos,d0
	addq.w	#1,d0
	cmpi.w	#36,d0
	bne	NoSinOver
	moveq	#0,d0
NoSinOver	move.w	d0,MomSinPos
	move.b	-8(a0),(a0)
	move.b	-16(a0),-8(a0)
	move.b	-24(a0),-16(a0)
	move.b	-32(a0),-24(a0)
	move.b	-40(a0),-32(a0)
	move.b	-48(a0),-40(a0)
	move.b	-56(a0),-48(a0)
	move.b	-64(a0),-56(a0)
	move.b	-72(a0),-64(a0)
	move.b	-80(a0),-72(a0)
	move.b	-88(a0),-80(a0)
	move.b	(a1,d0.w),-88(a0)
	rts
CalcDrawWelt	movem.l	a2-4,-(a7)
	movea.l	WorldBegin,a1
	adda.l	#16,a1
	move.l	(a5)+,a2
	move.w	#200,d7
CalcDrawLoop	move.l	(a2)+,(a1)+
	move.l	(a2)+,(a1)
	adda.l	#36,a1
	dbf	d7,CalcDrawLoop
	movem.l	(a7)+,a2-4
	rts
DrawWelt	move.w	#size/15-1,d7
	movea.l	World,a0
	movea.l	WorldBegin,a1
DrawWeltLoop	move.w	d4,d2
	add.w	(a4)+,d2
	move.w	d2,d3
	lsr.w	#3,d2
	add.w	(a4)+,d2
	not.b	d3
	and.b	#7,d3
	move.b	(a2)+,d0
	move.w	(a3)+,d1
	btst	d3,(a0,d2.w)
	beq	NoPoint
	bset	d0,(a1,d1.w)
	bra	EndDraw
NoPoint	bclr	d0,(a1,d1.w)
EndDraw	dbf	d7,DrawWeltLoop
	rts
WeltInit	move.l	_DosBase,a6
	move.l	#DRW,d1
	move.l	#1005,d2
	jsr	Open(a6)
	move.l	d0,d7
	move.l	d0,d1
	move.l	zwi,d2
	move.l	#size/2+1,d3
	jsr	Read(a6)
	move.l	d7,d1
	jsr	Close(a6)
	move.l	zwi,a0
	move.l	DestRelWorld,a1
	move.l	#size/2,d0
InitRel	move.b	(a0)+,d1
	move.b	d1,d2
	lsr.b	#4,d1
	and.b	#7,d1
	and.b	#7,d2
	move.b	d1,(a1)+
	move.b	d2,(a1)+
	dbf	d0,InitRel
	move.l	#DW,d1
	move.l	#1005,d2
	jsr	Open(a6)
	move.l	d0,d7
	move.l	d0,d1
	move.l	DestWorld,d2
	move.l	#size*2,d3
	jsr	Read(a6)
	move.l	d7,d1
	jsr	Close(a6)
	move.l	#SW,d1
	move.l	#1005,d2
	jsr	Open(a6)
	move.l	d0,d7
	move.l	d0,d1
	move.l	zwi,d2
	move.l	#size*3,d3
	jsr	Read(a6)
	move.l	d7,d1
	jsr	Close(a6)
	move.l	zwi,a0
	move.l	SourWorld,a1
	move.l	#size-1,d0
SourInit	move.b	(a0)+,(a1)+
	move.b	(a0)+,(a1)+
	moveq	#0,d1
	move.b	(a0)+,d1
	mulu	#80,d1
	move.w	d1,(a1)+
	dbf	d0,SourInit
	move.l	4.w,a6
	move.l	zwi,a1
	move.l	#size*3,d0
	jsr	FreeMem(a6)
	rts
Calculate	move.l	#640*4,d0
	moveq	#1,d1
	jsr	AllocMem(a6)
	move.l	d0,Calculated
	move.l	d0,a5
	move.w	#639,d7
AllocCalc	move.l	#1608,d0
	move.l	#$10001,d1
	jsr	AllocMem(a6)
	move.l	d0,(a5)+
	dbf	d7,AllocCalc
	move.l	#sizeInit*3,d0
	moveq	#1,d1
	jsr	AllocMem(a6)
	move.l	d0,zwi
	move.l	#sizeInit,d0
	moveq	#1,d1
	jsr	AllocMem(a6)
	move.l	d0,DestRWorldInit
	move.l	#sizeInit*2,d0
	moveq	#1,d1
	jsr	AllocMem(a6)
	move.l	d0,DestWorldInit
	move.l	#sizeInit*4,d0
	moveq	#1,d1
	jsr	AllocMem(a6)
	move.l	d0,SourWorldInit
	move.l	_DosBase,a6
	move.l	#DRWI,d1
	move.l	#1005,d2
	jsr	Open(a6)
	move.l	d0,d7
	move.l	d0,d1
	move.l	zwi,d2
	move.l	#sizeInit/2+1,d3
	jsr	Read(a6)
	move.l	d7,d1
	jsr	Close(a6)
	move.l	zwi,a0
	move.l	DestRWorldInit,a1
	move.l	#sizeInit/2,d0
InitRelCal	move.b	(a0)+,d1
	move.b	d1,d2
	lsr.b	#4,d1
	and.b	#7,d1
	and.b	#7,d2
	move.b	d1,(a1)+
	move.b	d2,(a1)+
	dbf	d0,InitRelCal
	move.l	#DWI,d1
	move.l	#1005,d2
	jsr	Open(a6)
	move.l	d0,d7
	move.l	d0,d1
	move.l	DestWorldInit,d2
	move.l	#sizeInit*2,d3
	jsr	Read(a6)
	move.l	d7,d1
	jsr	Close(a6)
	move.l	#SWI,d1
	move.l	#1005,d2
	jsr	Open(a6)
	move.l	d0,d7
	move.l	d0,d1
	move.l	zwi,d2
	move.l	#sizeInit*3,d3
	jsr	Read(a6)
	move.l	d7,d1
	jsr	Close(a6)
	move.l	zwi,a0
	move.l	SourWorldInit,a1
	move.l	#sizeInit-1,d0
SourInitCal	move.b	(a0)+,(a1)+
	move.b	(a0)+,(a1)+
	moveq	#0,d1
	move.b	(a0)+,d1
	mulu	#80,d1
	move.w	d1,(a1)+
	dbf	d0,SourInitCal
	move.l	4.w,a6
	move.l	zwi,a1
	move.l	#sizeInit*3,d0
	jsr	FreeMem(a6)
	move.l	Calculated,a5
	move.l	World,a4
	moveq	#0,d6
InitCalcFrame	move.w	#sizeInit-1,d7
	move.l	DestRWorldInit,a1
	move.l	DestWorldInit,a2
	move.l	SourWorldInit,a3
	move.l	(a5)+,a0
DrawCalc	move.w	d6,d2
	add.w	(a3)+,d2
	move.w	d2,d3
	lsr.w	#3,d2
	add.w	(a3)+,d2
	not.b	d3
	and.b	#7,d3
	move.b	(a1)+,d0
	move.w	(a2)+,d1
	btst	d3,(a4,d2.w)
	beq	NoPointCalc
	bset	d0,(a0,d1.w)
NoPointCalc	dbf	d7,DrawCalc
	bchg	#1,ciaapra
	add.w	#1,d6
	cmpi.w	#640,d6
	bne	InitCalcFrame
	move.l	SourWorldInit,a1
	move.l	#sizeInit*4,d0
	jsr	FreeMem(a6)
	move.l	DestWorldInit,a1
	move.l	#sizeInit*2,d0
	jsr	FreeMem(a6)
	move.l	DestRWorldInit,a1
	move.l	#sizeInit,d0
	jsr	FreeMem(a6)
	rts
WeltAlloc	move.l	#size,d0
	move.l	#1,d1
	move.l	4.w,a6
	jsr	AllocMem(a6)
	move.l	d0,DestRelWorld
	move.l	#size*2,d0
	move.l	#1,d1
	jsr	AllocMem(a6)
	move.l	d0,DestWorld
	move.l	#size*4,d0
	move.l	#1,d1
	jsr	AllocMem(a6)
	move.l	d0,SourWorld
	move.l	#640/8*201,d0
	move.l	#1,d1
	jsr	AllocMem(a6)
	move.l	d0,World
	move.l	d0,a0
	adda.l	#640/8*200,a0
	moveq	#19,d7
InitWeltBorder	move.l	#$FFFFFFFF,(a0)+
	dbf	d7,InitWeltBorder
	move.l	#size*3,d0
	move.l	#1,d1
	jsr	AllocMem(a6)
	move.l	d0,zwi
	rts
WeltLoad	move.l	#WeltName,d1
	move.l	#-2,d2
	move.l	_DosBase,a6
	jsr	Lock(a6)
	move.l	d0,d7
	move.l	#260,d0
	move.l	#1,d1
	move.l	4.w,a6
	jsr	AllocMem(a6)
	move.l	d0,IFFData
	move.l	d7,d1
	move.l	IFFData,d2
	move.l	d2,d6
	move.l	_DosBase,a6
	jsr	Examine(a6)
	move.l	d6,a6
	move.l	124(a6),DateiLength
	move.l	IFFData,a1
	move.l	#260,d0
	move.l	4.w,a6
	jsr	FreeMem(a6)
	move.l	DateiLength,d0
	move.l	#1,d1
	jsr	AllocMem(a6)
	move.l	d0,IFFData
	move.l	#WeltName,d1
	move.l	#1005,d2
	move.l	_DosBase,a6
	jsr	Open(a6)
	move.l	d0,d7
	move.l	d7,d1
	move.l	IFFData,d2
	move.l	DateiLength,d3
	jsr	Read(a6)
	move.l	d7,d1
	jsr	Close(a6)
	move.l	IFFData,a2	
	clr.l	Empty
	lea	Empty,a0
pBODYLoop	move.b	1(a0),(a0)
	move.b	2(a0),1(a0)
	move.b	3(a0),2(a0)
	move.b	(a2)+,3(a0)
	cmpi.l	#"BODY",Empty
	bne	pBODYLoop
	adda.l	#4,a2
pDeCode	clr.l	xyPos
	move.w	#199,d3
pHightLoop	move.l	World,d0
	add.l	xyPos,d0
	move.l	d0,a0
	moveq	#0,d1
pRow	cmpi.w	#80,d1
	bge	pInterpreted
	move.b	(a2)+,Byte
	move.b	(a2)+,Byte+1
	moveq	#0,d0
	move.b	Byte,d0
	cmpi.b	#127,d0
	bls	pDeEasy
pDeSame	sub.b	#3,d0
	move.w	#254,d4
	sub.b	d0,d4
	add.w	d4,d1
	sub.w	#1,d4
pDeSameCopy	move.b	Byte+1,(a0)+
	dbf	d4,pDeSameCopy
	bra	pRow
pDeEasy	move.b	Byte+1,(a0)+
	add.w	#1,d1
	tst.b	Byte
	beq	pRow
	add.w	d0,d1
	sub.w	#1,d0
pDeEasyCopy	move.b	(a2)+,(a0)+
	dbf	d0,pDeEasyCopy
	bra	pRow
pInterpreted	move.l	#80,d0
	add.l	d0,xyPos
	dbf	d3,pHightLoop
pDeCodeEnd	move.l	IFFData,a1
	move.l	DateiLength,d0
	move.l	4.w,a6
	jsr	FreeMem(a6)
	rts
WeltFree	move.l	DestRelWorld,a1
	move.l	4.w,a6
	move.l	#size,d0
	jsr	FreeMem(a6)
	move.l	DestWorld,a1
	move.l	#size*2,d0
	jsr	FreeMem(a6)
	move.l	SourWorld,a1
	move.l	#size*4,d0
	jsr	FreeMem(a6)
	move.l	World,a1
	move.l	#640/8*201,d0
	jsr	FreeMem(a6)
	move.l	Calculated,a5
	move.w	#639,d7
FreeCalculated	move.l	(a5)+,a1
	move.l	#1608,d0
	jsr	FreeMem(a6)
	dbf	d7,FreeCalculated
	move.l	Calculated,a1
	move.l	#640*4,d0
	jsr	FreeMem(a6)
	bsr	MusicFree
	rts
IFFLoad	move.l	#DateiName,d1
	move.l	#-2,d2
	move.l	_DosBase,a6
	jsr	Lock(a6)
	move.l	d0,d7
	move.l	#260,d0
	move.l	#1,d1
	move.l	4.w,a6
	jsr	AllocMem(a6)
	move.l	d0,IFFData
	move.l	d7,d1
	move.l	IFFData,d2
	move.l	d2,d6
	move.l	_DosBase,a6
	jsr	Examine(a6)
	move.l	d6,a6
	move.l	124(a6),DateiLength
	move.l	IFFData,a1
	move.l	#260,d0
	move.l	4.w,a6
	jsr	FreeMem(a6)
	move.l	DateiLength,d0
	move.l	#1,d1
	jsr	AllocMem(a6)
	move.l	d0,IFFData
	move.l	#DateiName,d1
	move.l	#1005,d2
	move.l	_DosBase,a6
	jsr	Open(a6)
	move.l	d0,d7
	move.l	d7,d1
	move.l	IFFData,d2
	move.l	DateiLength,d3
	jsr	Read(a6)
	move.l	d7,d1
	jsr	Close(a6)
	move.l	IFFData,a2	
	move.b	30(a2),Compression+1
	clr.l	Empty
	lea	Empty,a0
BODYLoop	move.b	1(a0),(a0)
	move.b	2(a0),1(a0)
	move.b	3(a0),2(a0)
	move.b	(a2)+,3(a0)
	cmpi.l	#"BODY",Empty
	bne	BODYLoop
	adda.l	#4,a2
DeCode	tst.w	Compression
	bne	DifficultCode
	moveq	#0,d3
EasyBit	move.w	#255,d2
EasyDepth	lea	BitMap,a0
	moveq	#5,d1
EasyRow	move.l	(a0)+,a1
	add.l	d3,a1
	moveq	#39,d0
EasyCopy	move.b	(a2)+,(a1)+
	dbf	d0,EasyCopy
	dbf	d1,EasyRow
	add.l	#40,d3
	dbf	d2,EasyDepth
	bra	DeCodeEnd
DifficultCode	clr.l	xyPos
	move.w	#255,d3
HightLoop	lea	BitMap,a1
	moveq	#5,d2
DepthLoop	move.l	(a1)+,d0
	add.l	xyPos,d0
	move.l	d0,a0
	moveq	#0,d1
Row	cmpi.w	#40,d1
	bge	Interpreted
	move.b	(a2)+,Byte
	move.b	(a2)+,Byte+1
	moveq	#0,d0
	move.b	Byte,d0
	cmpi.b	#127,d0
	bls	DeEasy
DeSame	sub.b	#3,d0
	move.w	#254,d4
	sub.b	d0,d4
	add.w	d4,d1
	sub.w	#1,d4
DeSameCopy	move.b	Byte+1,(a0)+
	dbf	d4,DeSameCopy
	bra	Row
DeEasy	move.b	Byte+1,(a0)+
	add.w	#1,d1
	tst.b	Byte
	beq	Row
	add.w	d0,d1
	sub.w	#1,d0
DeEasyCopy	move.b	(a2)+,(a0)+
	dbf	d0,DeEasyCopy
	bra	Row
Interpreted	dbf	d2,DepthLoop
	moveq	#40,d0
	add.l	d0,xyPos
	dbf	d3,HightLoop
DeCodeEnd	rts
IFFColor	move.l	IFFData,a2
	clr.l	Empty
	lea	Empty,a0
CMAPLoop	move.b	1(a0),(a0)
	move.b	2(a0),1(a0)
	move.b	3(a0),2(a0)
	move.b	(a2)+,3(a0)
	cmpi.l	#"CMAP",Empty
	bne	CMAPLoop
	adda.l	#4,a2
	moveq	#31,d7
	lea	$DFF000+color00,a5
	lea	MeerColor,a1
FarbInit	moveq	#0,d1
	moveq	#0,d2
	moveq	#0,d3
	move.b	(a2)+,d1
	move.b	(a2)+,d2
	move.b	(a2)+,d3
	lsr.b	#4,d1
	lsr.b	#4,d3
	or.b	d2,d3
	cmpi.w	#9,d7
	bhi	NoMeer
	move.b	d1,(a1)+
	move.b	d3,(a1)+
NoMeer	lsl.w	#8,d1
	or.w	d1,d3
	move.w	d3,(a5)+
	dbf	d7,FarbInit
	move.l	IFFData,a1
	move.l	DateiLength,d0
	move.l	4.w,a6
	jsr	FreeMem(a6)
	lea	$DFF000,a5
	rts
MetaLoad	move.l	#724,d0
	moveq	#3,d1
	move.l	4.w,a6
	jsr	AllocMem(a6)
	move.l	d0,MetaMorph
	move.l	d0,a5
	move.l	_DosBase,a6
	move.l	#MetName,d1
	move.l	#1005,d2
	jsr	Open(a6)
	move.l	d0,d7
	move.l	#960,d0
	move.l	#3,d1
	move.l	4.w,a6
	jsr	AllocMem(a6)
	move.w	#180,d6
MetaLoop	move.l	d0,(a5)+
	dbf	d6,MetaLoop
	move.l	d0,d2
	move.l	d7,d1
	move.l	#960,d3
	move.l	_DosBase,a6
	jsr	Read(a6)
	move.l	d7,d1
	jsr	Close(a6)
	rts
MusicLoad	movea.l	4.w,a6
	move.l	#70716,d0
	moveq	#1,d1
	jsr	AllocMem(a6)
	move.l	d0,MemPointer
	move.l	#70716,MemLength
	bsr	LoadModule
	bsr	InitChannels
	clr.w	VBlankZaehler
	move.w	#6,SchnellF0x
	movea.l	4.w,a6
	lea	IntServerStrct,a1
	moveq	#5,d0
	jsr	AddIntServer(a6)
	rts
MusicFree	lea	IntServerStrct,a1
	moveq	#5,d0
	jsr	DeviceProc(a6)
	bsr	ClearAllSounds
	bsr	FreeSamples
	movea.l	4.w,a6
	movea.l	MemPointer,a1
	move.l	MemLength,d0
	jsr	FreeMem(a6)
	rts
FreeSamples	movea.l	4.w,a6
	clr.w	aZaehler
FreeSampleLoop	lea	SamplePointers,a0
	move.w	aZaehler,D0
	lsl.w	#2,D0
	tst.l	(a0,d0.w)
	beq	NoSample
	movea.l	(a0,d0.w),a1
	movea.l	MemPointer,a0
	adda.l	#42,a0
	move.w	aZaehler,d1
	mulu	#30,d1
	move.w	(a0,d1.w),d0
	add.l	d0,d0
	jsr	FreeMem(a6)
NoSample	addq.w	#1,aZaehler
	cmpi.w	#31,aZaehler
	bne	FreeSampleLoop
	rts
ModuleAjust	movea.l	MemPointer,a0
	movea.l	a0,a1
	adda.l	#66006,a0
	adda.l	#466,a1
bLoop	move.l	(a0),484(a0)
	clr.l	(a0)
	subq.l	#4,a0
	cmpa.l	a0,a1
	bne	bLoop
	movea.l	MemPointer,a0
	movea.l	a0,a1
	adda.l	#950,a0
	adda.l	#1080,a1
aLoop	move.w	4(a0),(a0)+
	cmpa.l	a0,a1
	bne	aLoop
	move.l	#"M.K.",(a0)
	rts
LoadModule	movea.l	_DosBase,a6
	move.l	#FileName,d1
	move.l	#1005,d2
	jsr	Open(a6)
	move.l	d0,FileHandle
	move.l	d0,d1
	move.l	MemPointer,d2
	move.l	#1084,d3
	jsr	Read(a6)
	movea.l	MemPointer,a0
	cmpi.l	#"M.K.",1080(a0)
	beq	RightModulForm
	move.l	FileHandle,d1
	moveq	#0,d2
	moveq	#-1,d3
	jsr	Seek(a6)
	move.l	FileHandle,d1
	move.l	MemPointer,d2
	move.l	#600,d3
	jsr	Read(a6)
	bsr	ModuleAjust
RightModulForm	movea.l	MemPointer,a0
	adda.l	#952,a0
	moveq	#0,d0
	move.b	-1(a0),d0
	moveq	#0,d3
cLoop	cmp.b	(a0)+,d3
	bgt	BiggestA0
	move.b	-1(a0),d3
BiggestA0	dbf	d0,cLoop
	addq.w	#1,d3
	mulu	#1024,d3
	move.l	FileHandle,d1
	move.l	MemPointer,d2
	addi.l	#1084,d2
	jsr	Read(a6)
	move.w	#1,aZaehler
InstrModLoop	movea.l	MemPointer,a0
	move.w	aZaehler,d7
	mulu	#30,d7
	moveq	#0,d0
	move.w	12(a0,d7.W),d0
	beq	NoMemory
	add.l	d0,d0
	movea.l	4.w,a6
	move.l	#65538,d1
	move.l	d0,-(a7)
	jsr	AllocMem(a6)
	move.l	(a7)+,d6
	tst.l	d0
	beq	NoMemory
	move.w	aZaehler,d7
	lsl.w	#2,d7
	lea	SamplesBegin,a0
	move.l	d0,0(a0,d7.w)
	movea.l	_DosBase,a6
	move.l	FileHandle,d1
	move.l	d0,d2
	move.l	d6,d3
	jsr	Read(a6)
NoMemory	addq.w	#1,aZaehler
	cmpi.w	#32,aZaehler
	bne	InstrModLoop
	move.l	FileHandle,d1
	jsr	Close(a6)
	rts
SongFlag	dc.b	0
FileName	dc.b	"/music/demosound",0
aZaehler	dc.w	0
FileHandle	dc.l	0
InstrSTSourNum	ds.l	31
IntServerStrct	dc.l	0
	dc.l	0
NodeType	dc.b	2
NodePri	dc.b	192
	dc.l	0
	dc.l	0
	dc.l	InterruptPRG
DestRelWorld	dc.l	0
DestWorld	dc.l	0
SourWorld	dc.l	0
DestRWorldInit	dc.l	0
DestWorldInit	dc.l	0
SourWorldInit	dc.l	0
zwi	dc.l	0
Calculated	dc.l	0
World	dc.l	0
WorldBegin	dc.l	0
MetaMorph	dc.l	0
MetaBegin	dc.l	0
MetaShadBegin	dc.l	0
DateiLength	dc.l	0
Empty	dc.l	0
xyPos	dc.l	0
IFFData	dc.l	0
BitMap	ds.l	6
CL	dc.l	0
_GfxBase	dc.l	0
_DosBase	dc.l	0
Scroll1	dc.l	0
Scroll2	dc.l	0
SinScrollBegin	dc.l	0
MomSinPos	dc.w	0
Compression	dc.w	0
Byte	dc.w	0
MeerColor	ds.w	10
SchriftColor	dc.w	$A00,$B20,$C61,$D92,$EC3,$FF4,$ED4,$DA3,$C72,$B41
FrameMet	dc.b	0
MetPhase	dc.b	0
ColorList	dc.w	$FFF
	dc.w	$FFF
	dc.w	$FFF
	dc.w	$FFF
	dc.w	$FFF
	dc.w	$FFF
	dc.w	$FFF
	dc.w	$FFF
	dc.w	$FFF
	dc.w	$FFF
	dc.w	$FFF
	dc.w	$FFF
	dc.w	$FFE
	dc.w	$FFD
	dc.w	$FFC
	dc.w	$FFB
	dc.w	$FFA
	dc.w	$FF9
	dc.w	$FF8
	dc.w	$FF7
	dc.w	$FF6
	dc.w	$FE5
	dc.w	$FE4
	dc.w	$FD3
	dc.w	$FD2
	dc.w	$FC1
	dc.w	$FC0
	dc.w	$ED0
	dc.w	$DD0
	dc.w	$DE1
	dc.w	$CE1
	dc.w	$CF1
	dc.w	$BF1
	dc.w	$BF2
	dc.w	$AF2
	dc.w	$9F2
	dc.w	$9F2
	dc.w	$8F3
	dc.w	$8F3
	dc.w	$7F3
	dc.w	$6F3
	dc.w	$5F3
	dc.w	$5F2
	dc.w	$4F2
	dc.w	$3F2
	dc.w	$3F2
	dc.w	$3E1
	dc.w	$4E1
	dc.w	$5E0
	dc.w	$6E0
	dc.w	$7D0
	dc.w	$8D0
	dc.w	$9D0
	dc.w	$AC0
	dc.w	$BC0
	dc.w	$CC0
	dc.w	$DB0
	dc.w	$EB0
	dc.w	$FB0
	dc.w	$FB1
	dc.w	$FC1
	dc.w	$FC2
	dc.w	$FD2
	dc.w	$FD3
	dc.w	$FE3
	dc.w	$FE4
	dc.w	$FF4
	dc.w	$EF3
	dc.w	$EE3
	dc.w	$DE2
	dc.w	$CD2
	dc.w	$BD1
	dc.w	$AD1
	dc.w	$9D0
	dc.w	$8D0
	dc.w	$7D1
	dc.w	$6D1
	dc.w	$5D1
	dc.w	$4D2
	dc.w	$3D2
	dc.w	$2D2
	dc.w	$1D3
	dc.w	$0D3
	dc.w	$0C3
	dc.w	$0C4
	dc.w	$1C4
	dc.w	$1C4
	dc.w	$0B4
	dc.w	$0B3
	dc.w	$1B3
	dc.w	$0B3
	dc.w	$0A3
	dc.w	$0A2
	dc.w	$1A2
	dc.w	$2A2
	dc.w	$2A2
	dc.w	$2A1
	dc.w	$291
	dc.w	$390
	dc.w	$390
	dc.w	$390
	dc.w	$390
	dc.w	$491
	dc.w	$492
	dc.w	$493
	dc.w	$492
	dc.w	$591
	dc.w	$592
	dc.w	$593
	dc.w	$592
	dc.w	$6A1
	dc.w	$6A2
	dc.w	$6A3
	dc.w	$6A2
	dc.w	$7A1
	dc.w	$7A0
	dc.w	$7A0
	dc.w	$7B0
	dc.w	$8B0
	dc.w	$8B1
	dc.w	$8C0
	dc.w	$9C0
	dc.w	$AC0
	dc.w	$AD0
	dc.w	$BD0
	dc.w	$CD0
	dc.w	$CE0
	dc.w	$DE0
	dc.w	$ED0
	dc.w	$ED0
	dc.w	$FD0
	dc.w	$FC0
	dc.w	$FC0
	dc.w	$FB0
	dc.w	$FB1
	dc.w	$FA2
	dc.w	$FA3
	dc.w	$F94
	dc.w	$F95
	dc.w	$E96
	dc.w	$D97
	dc.w	$DA7
	dc.w	$CA8
	dc.w	$CA8
	dc.w	$BA8
	dc.w	$BA7
	dc.w	$AB7
	dc.w	$AB6
	dc.w	$9B5
	dc.w	$9B4
	dc.w	$8B3
	dc.w	$7B2
	dc.w	$7B2
	dc.w	$7C1
	dc.w	$6C1
	dc.w	$6C0
	dc.w	$5C0
	dc.w	$5C1
	dc.w	$4C2
	dc.w	$4C1
	dc.w	$3D0
	dc.w	$3D1
	dc.w	$2D0
	dc.w	$2D0
	dc.w	$1E1
	dc.w	$1E0
	dc.w	$0E1
	dc.w	$0E1
	dc.w	$0F2
	dc.w	$1F2
	dc.w	$2F3
	dc.w	$3F3
	dc.w	$4F4
	dc.w	$5F5
	dc.w	$6F6
	dc.w	$7F7
	dc.w	$8F8
	dc.w	$BFB
	dc.w	$DFD
	dc.w	$FFF
Sinus	dc.b	136,153,170,187,204,221,221,238,238
	dc.b	238,238,238,221,221,204,187,170,153
	dc.b	136,119,102,85,68,51,51,34,34
	dc.b	34,34,34,51,51,68,85,102,119
dosname	DOSNAME
grafname	GRAFNAME
DateiName	dc.b	"/pics/Intro.pic",0
MetName	dc.b	"/pics/MetamorphData",0
WeltName	dc.b	"/pics/Welt.pic",0
DRW	dc.b	"/pics/DestRelWorld",0
DW	dc.b	"/pics/DestWorld",0
SW	dc.b	"/pics/SourWorld",0
DRWI	dc.b	"/pics/DestRelWorldInit",0
DWI	dc.b	"/pics/DestWorldInit",0
SWI	dc.b	"/pics/SourWorldInit",0
	cnop	0,2
InterruptPRG	movem.l	d1-7/a0-6,-(a7)
	move.w	VBlankZaehler,d7
	bsr	PlayerControll
	move.w	d7,VBlankZaehler
	movem.l	(a7)+,d1-7/a0-6
	moveq	#0,d0
	rts
InitChannels	lea	SamplePointers,a0
	moveq	#0,d0
ClrFirstLong	movea.l	(a0,d0.w),a1
	clr.l	(a1)
	addq.w	#4,d0
	cmpi.w	#31*4,d0
	bne	ClrFirstLong
	clr.w	$DFF000+aud0vol
	clr.w	$DFF000+aud1vol
	clr.w	$DFF000+aud2vol
	clr.w	$DFF000+aud3vol
	clr.l	PositionInSong
	clr.l	PositionInPage
	movea.l	MemPointer,a0
	move.b	950(a0),NumberOfPages+1
	rts
ClearAllSounds	clr.w	$DFF000+aud0vol
	clr.w	$DFF000+aud1vol
	clr.w	$DFF000+aud2vol
	clr.w	$DFF000+aud3vol
	move.w	#$F,$DFF000+dmacon
	rts
PlayerControll	add.w	#1,d7
	cmp.w	SchnellF0x,d7
	bne	NoNewPosCheck
	clr.w	d7
	bra	GetOnNewPos
NoNewPosCheck	lea	Channel0Infos,a6
	tst.b	ChannelPara(A6)
	beq	NoCan0Instruct
	lea	$DFF000+aud0lch,a5
	bsr	SpezInstructs
NoCan0Instruct	lea	Channel1Infos,a6
	tst.b	ChannelPara(a6)
	beq	NoCan1Instruct
	lea	$DFF000+aud1lch,a5
	bsr	SpezInstructs
NoCan1Instruct	lea	Channel2Infos,a6
	tst.b	ChannelPara(a6)
	beq	NoCan2Instruct
	lea	$DFF000+aud2lch,a5
	bsr	SpezInstructs
NoCan2Instruct	lea	Channel3Infos,a6
	tst.b	ChannelPara(a6)
	beq	NoCan3Instruct
	lea	$DFF000+aud3lch,a5
	bra	SpezInstructs
NoCan3Instruct	rts
SpezInstructs	move.b	ChanInstructs(a6),d0
	and.b	#15,d0
	tst.b	d0
	beq	NebenTon
	cmp.b	#$1,d0
	beq	TonUpZiehen
	cmp.b	#$2,d0
	beq	TonDownZiehen
	cmp.b	#$A,d0
	beq	ChangeAVolume
	rts
TonUpZiehen	moveq	#0,d0
	move.b	ChannelPara(a6),d0
	sub.w	d0,ChannelPeriode(a6)
	cmpi.w	#113,ChannelPeriode(a6)
	bpl	MoreThanMaxUp
	move.w	#113,ChannelPeriode(a6)
MoreThanMaxUp	move.w	ChannelPeriode(a6),aud0per-aud0lch(a5)
	rts
TonDownZiehen	moveq	#0,d0
	move.b	ChannelPara(A6),d0
	add.w	d0,ChannelPeriode(a6)
	cmpi.w	#1336,ChannelPeriode(a6)
	bmi	LessAlsMinDown
	move.w	#1336,ChannelPeriode(a6)
LessAlsMinDown	move.w	ChannelPeriode(a6),aud0per-aud0lch(a5)
	rts
ChangeAVolume	moveq	#0,d0
	move.b	ChannelPara(a6),d0
	lsr.b	#4,d0
	tst.b	d0
	beq	TonLeiser
	add.w	d0,ChannelVolume(a6)
	cmpi.w	#64,ChannelVolume(a6)
	bmi	MoreThanMaxVol
	move.w	#64,ChannelVolume(a6)
MoreThanMaxVol	move.w	ChannelVolume(a6),aud0vol-aud0lch(a5)
	rts
TonLeiser	moveq	#0,d0
	move.b	ChannelPara(a6),d0
	and.b	#15,d0
	sub.w	d0,ChannelVolume(a6)
	bpl	LessThanMinVol
	clr.w	ChannelVolume(a6)
LessThanMinVol	move.w	ChannelVolume(a6),aud0vol-aud0lch(a5)
	rts
NebenTon	move.w	d7,d0
	cmpi.w	#1,d0
	beq	OberTonA
	cmpi.w	#2,d0
	beq	OberTonB
	cmpi.w	#3,d0
	beq	NormalTon
	cmpi.w	#4,d0
	beq	OberTonA
	cmpi.w	#5,d0
	beq	OberTonB
	rts
OberTonA	moveq	#0,d0
	move.b	ChannelPara(a6),d0
	lsr.b	#4,d0
	bra	OberTonIn
OberTonB	moveq	#0,d0
	move.b	ChannelPara(a6),d0
	and.b	#15,d0
OberTonIn	add.w	d0,d0
	moveq	#0,d1
	move.w	EigenPeriode(a6),d1
	lea	NebenTonListe,a0
CheckOnNewPer	move.w	(a0,d0.w),d2
	cmp.w	(a0),d1
	beq	NeuerTon
	addq.l	#2,a0
	bra	CheckOnNewPer
NormalTon	move.w	EigenPeriode(a6),d2
NeuerTon	move.w	d2,aud0per-aud0lch(A5)
	rts
GetOnNewPos	movea.l	MemPointer,a0
	movea.l	a0,a3
	adda.l	#12,a3
	movea.l	a0,a2
	adda.l	#952,a2
	adda.l	#1084,a0
	move.l	PositionInSong,d0
	moveq	#0,d1
	move.b	(a2,d0.w),d1
	asl.l	#8,d1
	asl.l	#2,d1
	add.l	PositionInPage,d1
	clr.w	AllChanDMACON
	lea	$DFF000+aud0lch,a5
	lea	Channel0Infos,a6
	bsr	InitNewSamples
	lea	$DFF000+aud1lch,a5
	lea	Channel1Infos,a6
	bsr	InitNewSamples
	lea	$DFF000+aud2lch,a5
	lea	Channel2Infos,a6
	bsr	InitNewSamples
	lea	$DFF000+aud3lch,a5
	lea	Channel3Infos,a6
	bsr	InitNewSamples
	move.w	#500,d0
ZoegerLoop	dbf	d0,ZoegerLoop
	move.w	#$8000,d0
	or.w	AllChanDMACON,d0
	move.w	d0,$DFF000+dmacon
	lea	Channel3Infos,a6
	cmpi.w	#1,ChannelNoLoop(a6)
	bne	NoChan3Loop
	move.l	ChanSamLoopBeg(a6),$DFF000+aud3lch
	move.w	#1,$DFF000+aud3len
NoChan3Loop	lea	Channel2Infos,a6
	cmpi.w	#1,ChannelNoLoop(a6)
	bne	NoChan2Loop
	move.l	ChanSamLoopBeg(a6),$DFF000+aud2lch
	move.w	#1,$DFF000+aud2len
NoChan2Loop	lea	Channel1Infos,a6
	cmpi.w	#1,ChannelNoLoop(a6)
	bne	NoChan1Loop
	move.l	ChanSamLoopBeg(a6),$DFF000+aud1lch
	move.w	#1,$DFF000+aud1len
NoChan1Loop	lea	Channel0Infos,a6
	cmpi.w	#1,ChannelNoLoop(a6)
	bne	NoChan0Loop
	move.l	ChanSamLoopBeg(a6),$DFF000+aud0lch
	move.w	#1,$DFF000+aud0len
NoChan0Loop	move.l	PositionInPage,d0
	addi.l	#16,d0
	move.l	d0,PositionInPage
	cmp.l	#1024,d0
	bne	PageNotFertig
GoToNextPage	clr.l	PositionInPage
	addq.l	#1,PositionInSong
	move.w	NumberOfPages,d0
	cmp.w	PositionInSong+2,d0
	bne	PageNotFertig
	clr.l	PositionInSong
PageNotFertig	tst.w	GoNextPosFlag
	beq	GetOutOfLoop
	clr.w	GoNextPosFlag
	bra	GoToNextPage
GetOutOfLoop	rts
InitNewSamples	move.l	(a0,d1.l),(a6)
	addq.l	#4,d1
	moveq	#0,d2
	move.b	ChanInstructs(a6),d2
	and.b	#$F0,d2
	lsr.b	#4,d2
	move.b	(a6),d0
	andi.b	#$F0,d0
	or.b	d0,d2
	tst.b	d2
	beq	ChannelOn?
	moveq	#0,d3
	lea	SamplesBegin,a1
	move.l	d2,d4
	asl.l	#2,d2
	mulu	#30,d4
	move.l	(a1,d2.w),ChannelSamAdr(a6)
	move.w	(a3,d4.l),ChanSamLoopLen(a6)
	move.w	2(a3,d4.l),ChannelVolume(a6)
	move.w	4(a3,d4.l),d3
	tst.w	d3
	beq	PlaySamFromBeg
	move.l	ChannelSamAdr(a6),d2
	add.l	d3,d2
	move.l	d2,ChannelSamAdr(a6)
	move.l	d2,ChanSamLoopBeg(a6)
	move.w	6(a3,d4.l),ChanSamLoopLen(a6)
	move.w	6(a3,d4.l),ChannelNoLoop(a6)
	move.w	ChannelVolume(a6),aud0vol-aud0lch(a5)
	bra	ChannelOn?
PlaySamFromBeg	move.l	ChannelSamAdr(a6),d2
	add.l	d3,d2
	move.l	d2,ChanSamLoopBeg(a6)
	move.w	6(a3,d4.l),ChannelNoLoop(a6)
	move.w	ChannelVolume(a6),aud0vol-aud0lch(a5)
ChannelOn?	tst.w	(a6)
	beq	ChannelOff
	move.w	(a6),EigenPeriode(a6)
	move.w	ChannelDMACON(a6),$DFF096
	move.l	ChannelSamAdr(a6),aud0lch-aud0lch(a5)
	move.w	ChanSamLoopLen(a6),aud0len-aud0lch(a5)
	move.w	(a6),aud0per-aud0lch(a5)
	move.w	ChannelDMACON(a6),d0
	or.w	d0,AllChanDMACON
	move.w	(a6),ChannelPeriode(a6)
ChannelOff	move.b	ChanInstructs(a6),d0
	and.b	#$F,d0
	cmp.b	#$B,d0
	beq	JumpOnPattern
	cmp.b	#$C,d0
	beq	ChangeCVolume
	cmp.b	#$D,d0
	beq	GoNextPos
	cmp.b	#$E,d0
	beq	FilterOnOff
	cmp.b	#$F,d0
	beq	ChangeVitesse
	rts
JumpOnPattern	not.w	GoNextPosFlag
	moveq	#0,d0
	move.b	ChannelPara(a6),d0
	subq.b	#1,d0
	move.l	d0,PositionInSong
	rts
ChangeCVolume	move.b	ChannelPara(a6),aud0vol-aud0lch(A5)
	rts
GoNextPos	not.w	GoNextPosFlag
	rts
FilterOnOff	moveq	#0,d0
	move.b	ChannelPara(a6),d0
	and.b	#1,d0
	rol.b	#1,d0
	andi.b	#$FD,ciaapra
	or.b	d0,ciaapra
	rts
ChangeVitesse	move.b	ChannelPara(a6),d0
	and.w	#$F,d0
	beq	NoChangeOfVit
	move.w	d0,SchnellF0x
NoChangeOfVit	rts
ChanInstructs	equ	2
ChannelPara	equ	3
ChannelSamAdr	equ	4
ChanSamLoopLen	equ	8
ChanSamLoopBeg	equ	10
ChannelNoLoop	equ	14
EigenPeriode	equ	16
ChannelVolume	equ	18
ChannelDMACON	equ	20
ChannelPeriode	equ	22
Channel0Infos	ds.w	10
	dc.w	1
	dc.w	0,0
Channel1Infos	ds.w	10
	dc.w	2
	dc.w	0,0
Channel2Infos	ds.w	10
	dc.w	4
	dc.w	0,0
Channel3Infos	ds.w	10
	dc.w	8
	dc.w	0,0
PositionInPage	dc.l	0
PositionInSong	dc.l	0
SamplesBegin	dc.l	0
SamplePointers	ds.l	31
VBlankZaehler	dc.w	0
SchnellF0x	dc.w	0
NumberOfPages	dc.w	0
AllChanDMACON	dc.w	0
GoNextPosFlag	dc.w	0
MemPointer	dc.l	0
MemLength	dc.l	0
NebenTonListe	dc.w	856,808,762,720,678,640,606,570,538,508,480,453
	dc.w	428,404,381,360,339,320,302,285,269,254,240,226
	dc.w	214,202,190,180,170,160,151,143,135,127,120,113
